// <auto-generated />
using System;
using Givt.Core.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Givt.Core.Persistence.Migrations
{
    [DbContext(typeof(CoreContext))]
    partial class CoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Givt.Core.Domain.Entities.AppVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("BuildNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCritical")
                        .HasColumnType("boolean");

                    b.Property<int>("OperatingSystem")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AppVersion");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.Authorisation", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DonorOwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RecipientOwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("UserEmailNormalised")
                        .HasColumnType("character varying(200)");

                    b.HasKey("UserId", "ResourceId");

                    b.HasIndex("DonorOwnerId");

                    b.HasIndex("RecipientOwnerId");

                    b.HasIndex("UserEmailNormalised");

                    b.ToTable("Authorisations");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Amounts")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("DefaultFeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Namespace")
                        .HasMaxLength(33)
                        .HasColumnType("character varying(33)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PayOutMethodId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DefaultFeeId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PayOutMethodId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.CampaignTexts", b =>
                {
                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("LanguageId")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.Property<string>("Goal")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("ThankYou")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Title")
                        .HasMaxLength(175)
                        .HasColumnType("character varying(175)");

                    b.HasKey("CampaignId", "LanguageId");

                    b.ToTable("CampaignTexts");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<Guid>("GivtOfficeId")
                        .HasColumnType("uuid");

                    b.Property<ulong?>("PaymentMethods")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Code");

                    b.HasIndex("GivtOfficeId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.Donor", b =>
                {
                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.Property<Guid>("PrimaryPayInMethodId")
                        .HasColumnType("uuid");

                    b.Property<string>("TimeZoneId")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("OwnerId");

                    b.HasIndex("PrimaryPayInMethodId");

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.Fee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Percentage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Fees");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.FeeAgreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<int>("Discount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FeeId")
                        .HasColumnType("uuid");

                    b.Property<int?>("MinVolumeAmount")
                        .HasColumnType("integer");

                    b.Property<int?>("MinVolumeCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("FeeId");

                    b.HasIndex("RecipientId");

                    b.ToTable("FeeAgreements");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.LegalEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() ON UPDATE now()");

                    b.Property<string>("CountryId")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(175)
                        .HasColumnType("character varying(175)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(175)
                        .HasColumnType("character varying(175)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Preposition")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasMaxLength(175)
                        .HasColumnType("character varying(175)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("LegalEntities");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.Medium", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<int>("Class")
                        .HasColumnType("integer");

                    b.Property<string>("MediumId")
                        .HasMaxLength(33)
                        .HasColumnType("character varying(33)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Mediums");

                    b.HasDiscriminator<int>("Class").HasValue(1);
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.PayInMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Class")
                        .HasColumnType("integer");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("PSP_Identification")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PSP_Owner")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("PayInMethod");

                    b.HasDiscriminator<int>("Class").HasValue(0);
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.PayOutMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("PSP_Identification")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PSP_Owner")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.ToTable("PayOutMethod");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.Recipient", b =>
                {
                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DefaultCampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(175)
                        .HasColumnType("character varying(175)");

                    b.Property<string>("LogoImageLink")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("PrimaryPayOutMethodId")
                        .HasColumnType("uuid");

                    b.HasKey("OwnerId");

                    b.HasIndex("DefaultCampaignId");

                    b.HasIndex("PrimaryPayOutMethodId");

                    b.ToTable("Recipients");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.Timeslot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MediumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("MediumId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Timeslots");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.User", b =>
                {
                    b.Property<string>("EmailNormalised")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("OS")
                        .HasColumnType("integer");

                    b.HasKey("EmailNormalised");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.CreditCard", b =>
                {
                    b.HasBaseType("Givt.Core.Domain.Entities.PayInMethod");

                    b.Property<string>("Fingerprint")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Last4")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.Location", b =>
                {
                    b.HasBaseType("Givt.Core.Domain.Entities.Medium");

                    b.Property<float>("Lat")
                        .HasColumnType("real");

                    b.Property<float>("Lon")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Radius")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.Authorisation", b =>
                {
                    b.HasOne("Givt.Core.Domain.Entities.Donor", "Donor")
                        .WithMany()
                        .HasForeignKey("DonorOwnerId");

                    b.HasOne("Givt.Core.Domain.Entities.Recipient", "Recipient")
                        .WithMany("Members")
                        .HasForeignKey("RecipientOwnerId");

                    b.HasOne("Givt.Core.Domain.Entities.User", "User")
                        .WithMany("Authorisations")
                        .HasForeignKey("UserEmailNormalised");

                    b.Navigation("Donor");

                    b.Navigation("Recipient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.Campaign", b =>
                {
                    b.HasOne("Givt.Core.Domain.Entities.Fee", "DefaultFee")
                        .WithMany()
                        .HasForeignKey("DefaultFeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Givt.Core.Domain.Entities.Recipient", "Owner")
                        .WithMany("Campaigns")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Givt.Core.Domain.Entities.PayOutMethod", "PayOutMethod")
                        .WithMany()
                        .HasForeignKey("PayOutMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DefaultFee");

                    b.Navigation("Owner");

                    b.Navigation("PayOutMethod");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.CampaignTexts", b =>
                {
                    b.HasOne("Givt.Core.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Texts")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.Country", b =>
                {
                    b.HasOne("Givt.Core.Domain.Entities.LegalEntity", "GivtOffice")
                        .WithMany()
                        .HasForeignKey("GivtOfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GivtOffice");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.Donor", b =>
                {
                    b.HasOne("Givt.Core.Domain.Entities.LegalEntity", "Owner")
                        .WithOne()
                        .HasForeignKey("Givt.Core.Domain.Entities.Donor", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Givt.Core.Domain.Entities.PayInMethod", "PrimaryPayInMethod")
                        .WithMany()
                        .HasForeignKey("PrimaryPayInMethodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Owner");

                    b.Navigation("PrimaryPayInMethod");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.FeeAgreement", b =>
                {
                    b.HasOne("Givt.Core.Domain.Entities.Campaign", "Campaign")
                        .WithMany("FeeAgreements")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Givt.Core.Domain.Entities.Fee", "Fee")
                        .WithMany()
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Givt.Core.Domain.Entities.Recipient", "Recipient")
                        .WithMany("FeeAgreements")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Fee");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.LegalEntity", b =>
                {
                    b.HasOne("Givt.Core.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.Medium", b =>
                {
                    b.HasOne("Givt.Core.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Mediums")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Givt.Core.Domain.Entities.Recipient", "Owner")
                        .WithMany("Mediums")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.PayInMethod", b =>
                {
                    b.HasOne("Givt.Core.Domain.Entities.Donor", "Owner")
                        .WithMany("PayInMethods")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.PayOutMethod", b =>
                {
                    b.HasOne("Givt.Core.Domain.Entities.Recipient", "Recipient")
                        .WithMany("PayOutMethods")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.Recipient", b =>
                {
                    b.HasOne("Givt.Core.Domain.Entities.Campaign", "DefaultCampaign")
                        .WithMany()
                        .HasForeignKey("DefaultCampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Givt.Core.Domain.Entities.LegalEntity", "Owner")
                        .WithOne()
                        .HasForeignKey("Givt.Core.Domain.Entities.Recipient", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Givt.Core.Domain.Entities.PayOutMethod", "PrimaryPayOutMethod")
                        .WithMany()
                        .HasForeignKey("PrimaryPayOutMethodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DefaultCampaign");

                    b.Navigation("Owner");

                    b.Navigation("PrimaryPayOutMethod");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.Timeslot", b =>
                {
                    b.HasOne("Givt.Core.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Timeslots")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Givt.Core.Domain.Entities.Medium", "Medium")
                        .WithMany("Timeslots")
                        .HasForeignKey("MediumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Givt.Core.Domain.Entities.Recipient", "Owner")
                        .WithMany("Timeslots")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Medium");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("FeeAgreements");

                    b.Navigation("Mediums");

                    b.Navigation("Texts");

                    b.Navigation("Timeslots");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.Donor", b =>
                {
                    b.Navigation("PayInMethods");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.Medium", b =>
                {
                    b.Navigation("Timeslots");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.Recipient", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("FeeAgreements");

                    b.Navigation("Mediums");

                    b.Navigation("Members");

                    b.Navigation("PayOutMethods");

                    b.Navigation("Timeslots");
                });

            modelBuilder.Entity("Givt.Core.Domain.Entities.User", b =>
                {
                    b.Navigation("Authorisations");
                });
#pragma warning restore 612, 618
        }
    }
}
